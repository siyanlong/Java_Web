<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="siyl.cit.dao.UserMapper" >
  <resultMap id="BaseResultMap" type="siyl.cit.model.User" >
    <id column="id" property="id" jdbcType="INTEGER"/>
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
	<!-- 构造函数的方式 -->
    <!-- 
    <constructor >
      <idArg column="id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="username" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="password" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="nickname" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="type" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </constructor>
     -->
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, nickname, type
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="siyl.cit.model.User" >
    insert into t_user (id, username, password, 
      nickname, type)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickname,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="siyl.cit.model.User" >
    insert into t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="type != null" >
        type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="siyl.cit.model.User" >
    update t_user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="siyl.cit.model.User" >
    update t_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- getAllUser的此种用法会造成N+1的问题，相当于查了一次t_user表，又查询了N次t_address -->
  <select id="selectUserAddress" parameterType="java.lang.Integer" resultType="siyl.cit.model.Address" >
  select 
  id,name,phone,postcode,user_id
  from t_address
  where t_address.user_id=#{id,jdbcType=INTEGER}
  </select>
  <resultMap id="userResultMap" type="siyl.cit.model.User" extends="BaseResultMap">
    <collection column="id" property="address" javaType="list" select="selectUserAddress" />
  </resultMap>
  <select id="getAllUser" resultMap="userResultMap" >
  select 
  <include refid="Base_Column_List" />
  from t_user
  </select>
  
  <!-- getAllUser_New的用法会避免上面的N+1的问题 -->
  <resultMap id="userResultMap_New" type="siyl.cit.model.User" extends="BaseResultMap">
    <collection property="address" javaType="list" ofType="siyl.cit.model.Address">
    	<id property="id" column="address_id"/>
    	<result property="name" column="name"/>
    	<result property="phone" column="phone"/>
    	<result property="postcode" column="postcode"/>
    	<result property="userId" column="user_id"/>
    </collection>
  </resultMap>
  <select id="getAllUser_New" resultMap="userResultMap_New" >
  select 
  t_user.id, t_user.username, t_user.password, t_user.nickname, t_user.type,
  t_address.id address_id, t_address.name, t_address.phone, t_address.postcode, t_address.user_id
  from t_user LEFT JOIN t_address ON t_user.id = t_address.user_id
  </select>
</mapper>